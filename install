#!/usr/bin/env bash
#
# Install things.

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"

set -euo pipefail

##################################################
# Arguments:
#   $1: String that is written out
#   $2: tput foreground color
#   $3: Flag -b for bold text (optional)
# Colors ($2):
#   0: black, 1: red, 2: green, 3: yellow,
#   4: blue, 5: magenta, 6: cyan, 7: white
##################################################
function echo_c {
    local setcolor setnormal setbold
    setcolor="$(tput setaf "$2")"
    setnormal="$(tput sgr0)"
    [[ ${3:-} == "-b" ]] && setbold="$(tput bold)"

    printf "%s%s%s%s\\n" "${setbold:-}" "${setcolor}" "$1" "${setnormal}"
}

##################################################
# Arguments:
#   $1: Prompt string
#   $2: nchars to read (0 to disable)
#   $3: Reply variable (optional)
##################################################
function ask_user {
    printf "%s" "$(echo_c "$1 " 3)"
    if [[ "${3:-}" ]]; then
        read -r -n "$2" "$3"
    else
        read -r -n "$2"
    fi
    if [[ "$2" != 0 ]]; then
        echo
    fi
}

##################################################
# Arguments:
#   $1: Source
#   $2: Destination
##################################################
function link_file {
    local src dst dst_dir
    src="$SCRIPT_DIR/$1"; dst="$HOME/$2"

    dst_dir=$(dirname "$dst")
    if [[ ! -e "$dst_dir" ]]; then
        mkdir -p "$dst_dir"
    fi

    if [[ -e "$dst" && ! -L "$dst" ]]; then
        ask_user "File '$dst' already exists. Do you want to overwrite [y/n]?" 1
        if [[ ! "$REPLY" =~ [yY] ]]; then
            return
        fi

        if [[ -d "$dst" ]]; then
            rm -rf "$dst"
        else
            rm "$dst"
        fi
    fi

    echo "$(echo_c "Linking" 6) $src $(echo_c "->" 6) $dst"
    if [[ -L "$dst" ]]; then
        unlink "$dst" # Replaces POSIX incompatible ln -sfn
    fi
    ln -s "$src" "$dst"
}

# Taken from https://github.com/holman/dotfiles/blob/master/script/bootstrap
##################################################
# Arguments:
#   None
##################################################
function setup_gitconfig {
  if [[ ! -f $SCRIPT_DIR/git/gitconfig.local ]]; then
    echo_c "Configuring name and email for git" 2 -b
    local git_authorname git_authoremail
    ask_user "What is your git user.name?" 0 git_authorname
    ask_user "What is your git user.email?" 0 git_authoremail

    local git_credential='cache'
    if [[ "$(uname -s)" == "Darwin" ]]; then
        local git_credential='osxkeychain'
    fi

    sed -e "s/AUTHORNAME/$git_authorname/g" \
        -e "s/AUTHOREMAIL/$git_authoremail/g" \
        -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" \
        "$SCRIPT_DIR/git/gitconfig.local.example" > "$SCRIPT_DIR/git/gitconfig.local"
  fi
}

setup_gitconfig

echo_c "Linking common files." 2 -b

link_file "sh/bash_profile" ".bash_profile"
link_file "sh/bashrc" ".bashrc"
link_file "sh/base16-shell" ".config/base16-shell"
link_file "sh/zshrc" ".zshrc"
link_file "sh/zshenv" ".zshenv"
link_file "sh/zsh/" ".zsh"
link_file "git/gitconfig" ".gitconfig"
link_file "git/gitignore" ".gitignore"
link_file "git/gitconfig.local" ".gitconfig.local"
link_file "git/gitmessage" ".gitmessage"
link_file "vim/vimrc" ".vimrc"
link_file "vim/" ".vim"
link_file "emacs/" ".emacs.d"
link_file "lein/profiles.clj" ".lein/profiles.clj"
link_file "tmux/tmux.conf" ".tmux.conf"

if [[ "$(uname -s)" == "Darwin" ]]; then
    echo_c "Running MacOS-specific stuff." 2 -b

    link_file "mac/nixpkgs/" ".config/nixpkgs"
    link_file "mac/scripts/music.scpt" ".local/bin/music_tmux"

    ask_user "Run defaults.sh [y/n]?" 1
    if [[ "$REPLY" =~ [yY] ]]; then
        sh "$SCRIPT_DIR/mac/defaults.sh" || true
    fi

    ask_user "Run homebrew.sh [y/n]?" 1
    if [[ "$REPLY" =~ [yY] ]]; then
        sh "$SCRIPT_DIR/mac/brew/homebrew.sh" || true
    fi

    ask_user "Run prefs.sh [y/n]?" 1
    if [[ "$REPLY" =~ [yY] ]]; then
        sh "$SCRIPT_DIR/mac/prefs.sh" "import" || true
    fi
elif [[ "$(uname -s)" == "Linux" ]]; then
    echo_c "Running Linux-specific stuff." 2 -b

    link_file "linux/xfce-term/" ".config/xfce4/terminal"
    link_file "linux/openbox/" ".config/openbox"
    link_file "linux/x/xinitrc" ".xinitrc"
    link_file "linux/x/Xresources" ".Xresources"
    link_file "linux/napapiiri/" ".themes/napapiiri"
    link_file "linux/i3/" ".config/i3"
    link_file "linux/polybar/" ".config/polybar"
    link_file "linux/compton/compton.conf" ".config/compton.conf"
    link_file "linux/xmonad/" ".xmonad"
    link_file "linux/rofi/config.rasi" ".config/rofi/config.rasi"
    link_file "linux/dunst/dunstrc" ".config/dunst/dunstrc"
    link_file "linux/notify-send.sh/notify-send.sh" ".local/bin/notify-send.sh"

    if [[ ! -e $HOME/.local/bin/lein ]]; then
        ask_user "Run lein_install.sh [y/n]?" 1
        if [[ "$REPLY" =~ [yY] ]]; then
            sh "$SCRIPT_DIR/linux/scripts/lein_install.sh"
        fi
    fi
fi

echo_c "Done." 2 -b
